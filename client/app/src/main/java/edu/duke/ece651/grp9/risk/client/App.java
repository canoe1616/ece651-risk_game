/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.grp9.risk.client;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
//import java.net.ServerSocket;
import java.net.Socket;
import java.util.Iterator;
import java.util.Scanner;

import edu.duke.ece651.grp9.risk.shared.Map;
//import edu.duke.ece651.grp9.risk.shared.Message;
import edu.duke.ece651.grp9.risk.shared.Territory;

public class App {
  private final BufferedReader inputReader;

  public App (BufferedReader inputSource) {
    this.inputReader = inputSource;
  }

  public String selectColor(ObjectInputStream stream, BufferedReader inputSource) throws IOException { 
    String s = "";
    try {
      String colorPrompt = (String)stream.readObject();
      System.out.println(colorPrompt);
      s = inputSource.readLine();
      System.out.println(s);
    }
    catch (Exception exception) {
      System.out.println(exception.getMessage());
      return "INVALID";
    }
    return s;
  }

  public static void main(String[] args) {
        
    BufferedReader inputSource = new BufferedReader(new InputStreamReader(System.in));
    App app = new App(inputSource);

    try {
      Socket socket = new Socket("localhost", 6666);

      InputStream inputStream = socket.getInputStream();
      ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);
       
      Map myMap = (Map)objectInputStream.readObject();
      System.out.println("Receive Map form server:");
      Iterator<Territory> it = myMap.getList().iterator();
      while (it.hasNext()){
        System.out.println(it.next().getName());
      }
      String color = app.selectColor(objectInputStream, inputSource);
      
      OutputStream outputStream = socket.getOutputStream();
      ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
      try {
        objectOutputStream.writeObject(color);
      } catch(Exception e) {
        System.out.println(e);
      }

      socket.close();
    } catch(Exception e) {
      System.out.println(e);
    }
  }
}
