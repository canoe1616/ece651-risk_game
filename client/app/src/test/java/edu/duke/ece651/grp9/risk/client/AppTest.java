/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.grp9.risk.client;

import edu.duke.ece651.grp9.risk.shared.Map;
import edu.duke.ece651.grp9.risk.shared.MapTextView;
import edu.duke.ece651.grp9.risk.shared.Player;
import edu.duke.ece651.grp9.risk.shared.Territory;
import org.checkerframework.checker.units.qual.A;
import org.junit.jupiter.api.Test;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    void findPlayer() {
        BufferedReader inputReader = new BufferedReader(new InputStreamReader(System.in));
        App app = new App(inputReader);
        Map m = new Map();
        Player p = new Player("red");
        m.addPlayer(p);
        assertEquals(p, app.findPlayer("red", m));
        assertEquals(null, app.findPlayer("green",m));
    }


    @Test
    void selectColor() throws IOException, InterruptedException {
        StringReader stringReader = new StringReader("black\nred\nsss");
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);
        BufferedReader inputReader = new BufferedReader(stringReader);
        App app = new App(inputReader);
        Thread th = new Thread() {
            @Override
            public void run() {
                try {
                    ServerSocket ss = new ServerSocket(6666);
                    Socket client = ss.accept();
                    OutputStream outputStream = client.getOutputStream();
                    ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
                    InputStream inputStream = client.getInputStream();
                    ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);
                    String sever2client = "false";
                    objectOutputStream.writeObject(sever2client);
                    outputStream.flush();
                    sever2client = "true";
                    objectOutputStream.writeObject(sever2client);
                    outputStream.flush();
                    sever2client = "false";
                    objectOutputStream.writeObject(sever2client);
                    outputStream.flush();
                    ss.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        };
        th.start();
        Thread.sleep(100);
        Socket socket = new Socket("localhost", 6666);
        OutputStream outputStream = socket.getOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
        InputStream inputStream = socket.getInputStream();
        ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);
        app.selectColor(inputReader, objectInputStream, objectOutputStream);
        String exp = "";
        assertEquals(exp, bytes.toString());
    }

    @Test
    void selectUnit() throws InterruptedException, IOException {
        StringReader stringReader = new StringReader("0 0 -1\n0 0 0  \n10 15 5");
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);
        BufferedReader inputReader = new BufferedReader(stringReader);
        App app = new App(inputReader);
        Thread th = new Thread() {
            @Override
            public void run() {
                try {
                    ServerSocket ss = new ServerSocket(6666);
                    Socket client = ss.accept();
                    OutputStream outputStream = client.getOutputStream();
                    ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
                    InputStream inputStream = client.getInputStream();
                    ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);
                    String sever2client = "false";
                    objectOutputStream.writeObject(sever2client);
                    outputStream.flush();
                    sever2client = "false";
                    objectOutputStream.writeObject(sever2client);
                    outputStream.flush();
                    sever2client = "true";
                    objectOutputStream.writeObject(sever2client);
                    outputStream.flush();
                    ss.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        };
        th.start();
        Thread.sleep(100);
        Socket socket = new Socket("localhost", 6666);
        OutputStream outputStream = socket.getOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
        InputStream inputStream = socket.getInputStream();
        ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);
        app.selectUnit(inputReader, objectInputStream, objectOutputStream);
        String exp = "";
        assertEquals(exp, bytes.toString());
    }

    @Test
    void getLoseActionString() {
        BufferedReader inputReader = new BufferedReader(new InputStreamReader(System.in));
        App app = new App(inputReader);
        assertEquals(null, app.getLoseActionString("Q"));
        assertEquals("the input character is invalid, please enter again!", app.getLoseActionString("P"));
    }

    @Test
    void getActionString() {
        BufferedReader inputReader = new BufferedReader(new InputStreamReader(System.in));
        App app = new App(inputReader);
        assertEquals(null, app.getActionString("A"));
        assertEquals("the input character is invalid, please enter again!", app.getLoseActionString("P"));
    }

    @Test
    void displayWinInfo() {
        BufferedReader inputReader = new BufferedReader(new InputStreamReader(System.in));
        App app = new App(inputReader);
        Player p1 = new Player("blue");
        Territory ter = new Territory("NC");
        Map map = new Map();
        map.addPlayer(p1);
        map.addTerritory(ter);
        p1.addTerritory(ter);
        ter.setUnit(15);
        String exp = "end_game = win\n" +
                "blue Player:\n" +
                "----------------------------------\n" +
                "15 units in NC(next to)\n" +
                "\n" +
                "\n" +
                "Congratulations! You win the game!\n";
        assertEquals(exp, app.displayWinInfo("blue",map));

    }

    @Test
    void displayGameOverInfo() {
        BufferedReader inputReader = new BufferedReader(new InputStreamReader(System.in));
        App app = new App(inputReader);
        Player p1 = new Player("blue");
        Territory ter = new Territory("NC");
        Map map = new Map();
        map.addPlayer(p1);
        MapTextView view = new MapTextView(map);
        String exp = "end_game = game over\n" +
                "blue Player:\n" +
                "----------------------------------\n" +
                "\n" +
                "\n" +
                "The game is over now.\n";
        assertEquals(exp, app.displayGameOverInfo("blue",map));
    }

    //    @Test
//    void test_displayPlayerLose() {
//        Player p1 = new Player("blue");
//        Territory ter = new Territory("NC");
//        Map map = new Map();
//        map.addPlayer(p1);
//        MapTextView view = new MapTextView(map);
//        String exp = "Player blue, you lose the game!"
//                + " What would you like to do?\n" +
//                " (Q)uit\n" + " (C)ontinue watching game\n";
//        assertEquals(exp, view.displayGameState(p1));
//
//    }
//
//    @Test
//    void test_displayGameOver() {
//        Player p1 = new Player("blue");
//        Territory ter = new Territory("NC");
//        Map map = new Map();
//        map.addPlayer(p1);
//        MapTextView view = new MapTextView(map);
//        String exp ="Game Over! Player blue wins the game!";
//        assertEquals(exp, view.displayGameState(p1));
//
//    }
}
