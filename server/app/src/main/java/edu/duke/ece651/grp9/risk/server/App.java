/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.grp9.risk.server;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;

//import edu.duke.ece651.grp9.risk.shared.MapPackage;
//import edu.duke.ece651.grp9.risk.shared.Message;
import edu.duke.ece651.grp9.risk.shared.*;


public class App {
  private static HashSet<String> remainingColors;
  public App() {
    remainingColors = new HashSet<>();
  }

  public App(Map m){
    remainingColors = new HashSet<>();
    Iterator<Player> it = m.getPlayer().iterator();
    while(it.hasNext()){
      remainingColors.add(it.next().getName());
    }
    
  }
  

  public void selectColor(ObjectOutputStream stream) {
    StringBuilder sb = new StringBuilder();
    sb.append("Please select what color you would like to play as: ");
    for (String color : remainingColors) {
      sb.append(color + " ");
    }
    try {
      stream.writeObject(sb.toString());
    } catch(Exception e) {
      System.out.println(e);
    }
  }
  
  public boolean deleteColor(String color){
    for (String c : remainingColors) {
      if(c.equals(color)){
        remainingColors.remove(color);
        return true;
      }
    }
    return false;
  }


  public void unitSetting(ObjectOutputStream stream, Player player){

    StringBuilder sb = new StringBuilder();
    sb.append("You have " + player.getTerritoryNumber()+ " territories: ");
    for(Territory ter : player.getTerritoryList()){
      sb.append(ter.getName()+ " ");
    }
    sb.append("\n");
    sb.append("You have 30 total units, how do you want to place the units?");
    try {
      stream.writeObject(sb.toString());
    } catch(Exception e) {
      System.out.println(e);
    }
  }

  public Player findPlayer(String color, Map m){
    HashSet<Player> list = m.getPlayer();
    Iterator<Player> it = list.iterator();
    while(it.hasNext()){
      Player pyr = it.next();
      if(pyr.getName().equals(color)){
        return pyr;
      }
     }
    return null;
  }


  public void playerUnitSetting(String unitString, Player player){

    ArrayList<Integer> unitList = new ArrayList<>();
    char[] tmp = unitString.toCharArray();

    //unitString -> array
    int k = 0;
    int digit = 0;
    while(k < tmp.length){

      if(Character.isDigit(tmp[k])){
        digit =0 ;
        while(k < tmp.length && Character.isDigit(tmp[k])){
          digit = digit*10 + Character. getNumericValue(tmp[k]);
          k++;
        }
      }
      unitList.add(digit);
      k++;
    }
    int i = 0;
    for(Territory ter: player.getTerritoryList()){
      ter.setUnit(unitList.get(i));
      i++;
    }
  }

  //boolean
  public static <objectInputStream> void main(String[] args) {
    
    MapFactory f = new MapFactory();
    Map m = f.makeMapForThree();
    int player_num = 3;
    App app = new App(m);
    ArrayList<Socket> socketList = new ArrayList<Socket>();
    Socket socket = null;

    //debug
    ArrayList<ObjectInputStream> InputList = new ArrayList<ObjectInputStream>();
    ArrayList<ObjectOutputStream> OutputList = new ArrayList<ObjectOutputStream>();



    try(ServerSocket ss = new ServerSocket(6666)){
      for(int i = 0; i<player_num; i++){
        Socket s = ss.accept();
        socketList.add(s);
      }

      for(int i=0; i<socketList.size(); i++){
      //add the checker
      ActionRuleChecker tmp = new ActionRuleChecker();

      socket = socketList.get(i);
      
      //send map object
      OutputStream outputStream = socket.getOutputStream();
      ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
      objectOutputStream.writeObject(m);
      OutputList.add(objectOutputStream);

      InputStream inputStream = socket.getInputStream();
      ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);
      InputList.add(objectInputStream);


      app.selectColor(objectOutputStream);
      //check if the color selection is valid
      String color = "";
      while(true){

        //boolean for color checking

      String color_correct = "true";
      //InputStream inputStream = socket.getInputStream();
      //ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);
      color = (String)objectInputStream.readObject();

      // add the checker
        //if everything is good, we will send "true" to the client

      //System.out.println(color);
      while(tmp.checkColor(color, remainingColors) != null){

        //System.out.println(tmp.checkColor(color, remainingColors));
        color_correct = "false";
        
        objectOutputStream.writeObject("false");

        //read the new color from the client
        color = (String)objectInputStream.readObject();
        }

      if(tmp.checkColor(color, remainingColors) == null) {
        color_correct = "true";
          objectOutputStream.writeObject(color_correct);
           app.deleteColor(color);
           break;
      }
      }
      //read unit assignment
      app.unitSetting(objectOutputStream, app.findPlayer(color, m));
      String unitString = "";
      while(true){
        String unit_correct = "true";
        //InputStream inputStream = socket.getInputStream();
        //ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);

        unitString = (String)objectInputStream.readObject();

        // add the checker

        while(tmp.checkUnit(unitString, app.findPlayer(color, m)) != null){
          //System.out.println(unitString);
          unit_correct = "false";
          objectOutputStream.writeObject("false");
          unitString = (String)objectInputStream.readObject();
          //objectOutputStream.reset();

        }
        
        if(tmp.checkUnit(unitString, app.findPlayer(color, m)) == null) {
           unit_correct = "true";
           objectOutputStream.writeObject(unit_correct);
           //objectOutputStream.reset();
            System.out.println(unitString);
            app.playerUnitSetting(unitString, app.findPlayer(color, m));
           break;
        }

      }
      }
      //-------------------end of initial placemnt----------------//

      for(int i=0; i<socketList.size(); i++){
        //add the rule checker
        //socket = socketList.get(i);
        //send the map again

        OutputList.get(i).reset();
        OutputList.get(i).writeObject(m);
        //To show the map in the server side- 【debug】
        MapTextView mtv = new MapTextView(m);
        String gameStateInitial = mtv.displayGameState(null, app.findPlayer("red", m));
        System.out.println(gameStateInitial);

        System.out.println("Sent map");
      }
      TimeUnit.SECONDS.sleep(1000);
    ss.close();
  }
    catch(Exception e){
      System.out.println(e);
    }
  }
};
